buildscript {
    ext {
        junitVersion = '5.7.0'
        ktlintVersion = '9.4.0'
    }
}

plugins {
    // Core
    id 'idea'
    id 'java-gradle-plugin'
    id 'maven-publish'

    // Kotlin
    id 'org.jetbrains.kotlin.jvm' version '1.3.72'

    // Gradle
    id 'com.gradle.plugin-publish' version '0.12.0'

    // Tools
    id 'org.jlleitschuh.gradle.ktlint' version "$ktlintVersion"
    id 'org.jlleitschuh.gradle.ktlint-idea' version "$ktlintVersion"
}

apply from: 'gradle/integration-test.gradle'

group 'com.betomorrow.gradle'
version '1.0.2-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext {
    notSnapshot = { !version.endsWith('SNAPSHOT') }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    compileOnly gradleApi()

    // Third Party
    compile 'com.google.api-client:google-api-client:1.27.0'
    compile 'com.google.oauth-client:google-oauth-client-jetty:1.27.0'
    compile 'com.google.apis:google-api-services-drive:v3-rev136-1.25.0'
    compile 'org.apache.poi:poi-ooxml:4.0.1'

    // Testing
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"

    testCompile 'org.assertj:assertj-core:3.17.2'
    testCompile gradleTestKit()
    testCompile 'commons-io:commons-io:2.8.0'

    testRuntime 'cglib:cglib-nodep:3.3.0'       // allows mocking of classes (in addition to interfaces)
    testRuntime 'org.objenesis:objenesis:3.1'   // allows mocking of classes without default constructor (together with CGLIB)
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

test {
    useJUnitPlatform {
        includeEngines 'junit-jupiter'
    }

    testLogging {
        events 'passed', 'skipped', 'failed'
    }
}


/**
 * Publishing
 */

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    archiveClassifier.set('sources')
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifact sourceJar
        }
    }
}

gradlePlugin {
    testSourceSets sourceSets.integrationTest

    plugins {
        wordingPlugin {
            id = 'com.betomorrow.dotnet.wording'
            displayName = 'Gradle Wording Plugin for .Net Projects'
            description = 'Plugin to import wording from Google Sheet then integrate it as .resx files in .Net Projects.'
            implementationClass = 'com.betomorrow.gradle.wording.WordingPlugin'
        }
    }
}

pluginBundle {
    website = 'https://github.com/gmarrot/dotnet-wording-plugin'
    vcsUrl = 'https://github.com/gmarrot/dotnet-wording-plugin'

    tags = [ 'dotnet', 'wording', 'resx', 'tool' ]
}

publishPlugins {
    onlyIf notSnapshot
}


/**
 * Gradle Wrapper
 */

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}
